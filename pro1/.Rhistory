iquery <- "insert into sangdata values(10, '핸드크림', 34, 5000)"
dbSendUpdate(conn, iquery)
df <- data.frame(code=11, sang='립밤', su=12, dan=2000)
df
dbSendUpdate(conn, "insert into sangdata values(?, ?, ?, ?)", df$code, df$sang, df$su, df$dan)
dbGetQuery(conn, "select * from sangdata")
# 레코드 수정
uquery <- "update sangdata set sang='운동화' where code=11"
dbSendUpdate(conn, uquery)
dbGetQuery(conn, "select * from sangdata")
# 레코드 삭제
dbSendUpdate(conn, "delete from sangdata where code=11")
dbGetQuery(conn, "select * from sangdata")
head(goodsAll, 3)
mean(goodsAll$su)
hist(goodsAll$su)
barplot(goodsAll$su, col=rainbow(10), names.arg = goodsAll$sang)
goods <- dbGetQuery(conn, "select * from sangdata where sang like '가죽%")
barplot(goodsAll$su, col=rainbow(10), names.arg = goodsAll$sang)
goods <- dbGetQuery(conn, "select * from sangdata where sang like '가죽%")
goods <- dbGetQuery(conn, "select * from sangdata where sang like '가죽%")
goods
query <- "select code as 코드, sang as 품명 from sangdata order by code desc"
df <- dbGetQuery(conn, query)
str(df)
goods <- dbGetQuery(conn, "select * from sangdata where sang like '가죽%'")
goods <- dbGetQuery(conn, "select * from sangdata where sang like '가죽%'")
goods
query <- "select code as 코드, sang as 품명 from sangdata order by code desc"
df <- dbGetQuery(conn, query)
str(df)
# 레코드 추가
iquery <- "insert into sangdata values(10, '핸드크림', 34, 5000)"
dbSendUpdate(conn, iquery)
goods <- dbGetQuery(conn, "select * from sangdata where sang like '가죽%'")
goods
# 레코드 삭제
dbSendUpdate(conn, "delete from sangdata where code=11")
dbGetQuery(conn, "select * from sangdata")
sangdf <- read.csv("sangpum.csv", header = T, fileEncoding = "utf-8")
sangdf <- read.csv("sangpum.csv", header = T, fileEncoding = "utf-8")
sangdf <- read.csv("sangpum.csv", header = T, fileEncoding = "utf-8")
sangdf <- read.csv("sangpum.csv", header = T, fileEncoding = "utf-8")
source("C:/work/rsou/pro1/ex9.R")
sangdf <- read.csv("sangpum.csv", header = T, fileEncoding = "utf-8")
sangdf
# 참고
paste("Hi", "Everybody")
paste0("Hi", "Everybody")
install.packages("dplyr")
library(dplyr)
# push data
func(conn, "sangdata", sangdf)
# 여러 개의 행을 가진 data.frame 의 자료를 DB 에 추가하려면 함수 작성
func <- function(conn, table, df){
batch <- apply(df, 1, FUN = function(x) paste("'", trimws(x), "'", collapse=",")) %>%
paste0("(",.,")", collapse = ",\n")
print(batch)
}
# push data
func(conn, "sangdata", sangdf)
# 여러 개의 행을 가진 data.frame 의 자료를 DB 에 추가하려면 함수 작성
func <- function(conn, table, df){
batch <- apply(df, 1, FUN = function(x) paste0("'", trimws(x), "'", collapse=",")) %>%
paste0("(",.,")", collapse = ",\n")
print(batch)
}
# push data
func(conn, "sangdata", sangdf)
# print(batch)
iquery <- paste("insert into", table, "values", batch)
source("C:/work/rsou/pro1/ex9.R", echo=TRUE)
install.packages("RSQLite")
# 여러 개의 행을 가진 data.frame 의 자료를 DB 에 추가하려면 함수 작성
func <- function(conn, table, df){
batch <- apply(df, 1, FUN = function(x) paste0("'", trimws(x), "'", collapse=",")) %>%
paste0("(",.,")", collapse = ",\n")
# print(batch)
iquery <- paste("insert into", table, "values", batch)
dbSendUpdate(conn,iquery)
}
# push data
func(conn, "sangdata", sangdf)
dbGetQuery(conn, "select * from sangdata")
# push data
func(conn, "sangdata", sangdf)
dbDisconnect(conn)
# 여러 개의 행을 가진 data.frame 의 자료를 DB 에 추가하려면 함수 작성
func <- function(conn, table, df){
batch <- apply(df, 1, FUN = function(x) paste0("'", trimws(x), "'", collapse=",")) %>%
paste0("(",.,")", collapse = ",\n")
# print(batch)
iquery <- paste("insert into", table, "values", batch)
dbSendUpdate(conn,iquery)
}
# push data
func(conn, "sangdata", sangdf)
dbGetQuery(conn, "select * from sangdata")
dbDisconnect(conn)
# 원격 DB : MariaDb와와 연동
drv <- JDBC(driverClass = "org.mariadb.jdbc.Driver",
classPath = "c:/work/mariadb-java-client-2.6.2.jar")
conn <- dbConnect(drv = drv, "jdbc:mysql://127.0.0.1:3306/test", "root", "123")
conn
dbListTables(conn)
# sangdata table로  crud 경험
query <- "select * from sangdata"
goodsAll <- dbGetQuery(conn, query)
goodsAll
is(goodsAll)
head(goodsAll, 3)
mean(goodsAll$su)
hist(goodsAll$su)
barplot(goodsAll$su, col=rainbow(10), names.arg = goodsAll$sang)
goods <- dbGetQuery(conn, "select * from sangdata where sang like '가죽%'")
goods
query <- "select code as 코드, sang as 품명 from sangdata order by code desc"
df <- dbGetQuery(conn, query)
str(df)
# 레코드 추가
iquery <- "insert into sangdata values(10, '핸드크림', 34, 5000)"
dbSendUpdate(conn, iquery)
df <- data.frame(code=11, sang='립밤', su=12, dan=2000)
df
dbSendUpdate(conn, "insert into sangdata values(?, ?, ?, ?)", df$code, df$sang, df$su, df$dan)
dbGetQuery(conn, "select * from sangdata")
# 레코드 수정
uquery <- "update sangdata set sang='운동화' where code=11"
dbSendUpdate(conn, uquery)
dbGetQuery(conn, "select * from sangdata")
# 레코드 삭제
dbSendUpdate(conn, "delete from sangdata where code=11")
dbGetQuery(conn, "select * from sangdata")
sangdf <- read.csv("sangpum.csv", header = T, fileEncoding = "utf-8")
sangdf
# 참고
paste("Hi", "Everybody")  # "Hi Everybody"
paste0("Hi", "Everybody") # "HiEverybody"
install.packages("dplyr")
install.packages("dplyr")
library(dplyr)  # %>% 연산자를 사용하기 위함
# 여러 개의 행을 가진 data.frame 의 자료를 DB 에 추가하려면 함수 작성
func <- function(conn, table, df){
batch <- apply(df, 1, FUN = function(x) paste0("'", trimws(x), "'", collapse=",")) %>%
paste0("(",.,")", collapse = ",\n")
# print(batch)
iquery <- paste("insert into", table, "values", batch)
dbSendUpdate(conn,iquery)
}
# push data
func(conn, "sangdata", sangdf)
dbGetQuery(conn, "select * from sangdata")
dbDisconnect(conn)
# 중심경향값 (평균, 중위수, 최빈수), 산포도(분산, 표준편차, 범위, 사분위수), 분포도(왜도, 첨도도
mean(1:5)
var(1:5)
sd(1:5)
summary(1:10)
# iris dataset로 작업
head(iris, 3)
df <- iris[, 1:4]
head(df, 3)
dim(df)
(iris$Sepal.Length - mean(iris$Sepal.Length)) / sd(iris$Sepal.Length)
df$Sepal.Length
# 방법2 : 내장 사용
scale(df$Sepal.Length)
scale(df)
# 방법3 : 내장 함수 사용
apply(x=as.matrix(df$Sepal.Length), MARGIN = 2, FUN = "fun1")
# 방법3 : 내장 함수 사용
apply(x=as.matrix(df$Sepal.Length), MARGIN = 2, FUN = "func1")
# 방법3 : 함수작성 후 사용
func1 <- function(x){
reutrn ((x - mean(x)) / sd(x))
}
func1(iris$Sepal.Length)
# 방법3 : 내장 함수 사용
apply(x=as.matrix(df$Sepal.Length), MARGIN = 2, FUN = "func1")
apply(x=df, MARGIN = 2, FUN = "func1")
소값을 0, 최대값을 1로 만드는 방법
# 정규화 : 최대값과 최소값을 사용하여 원래 데이터의 최소값을 0, 최대값을 1로 만드는 방법
# 수식 : (요소값 - 최소값) / (최대값 - 최소값값)
func2 <- function(x){
return((x - min(x)) / max(x) - min(x)))
func2(iris$Sepal.Length)
func2(1:10)
return((x - min(x)) / (max(x) - min(x)))
# 정규화 : 최대값과 최소값을 사용하여 원래 데이터의 최소값을 0, 최대값을 1로 만드는 방법
# 수식 : (요소값 - 최소값) / (최대값 - 최소값값)
func2 <- function(x){
return((x - min(x)) / (max(x) - min(x)))
}
func2(iris$Sepal.Length)
func2(1:10)
func2(c(5000:5100, 10))
func2(-10:-20)
# 평균이 크게 다른 두개 이상의 집단이 있을 때, 각 집단의 상대적 동질성을 감안한 산포도의 척도도
# 변동계수(c.v) : 평균에 대한 표준편차의 비율. 표준편차를 산술평균으로 나눈 것
# 변동계수(c.v) : 평균에 대한 표준편차의 비율. 표준편차를 산술평균으로 나눈 것
# 평균이 크게 다른 두개 이상의 집단이 있을 때, 각 집단의 상대적 동질성을 감안한 산포도의 척도
mean(tom)
# 예) 3개의 생물에 대해 2명의 관측자가 물 용량을 측정한 데이터가 있다.
tom <- c(54, 50, 52)  # 물 : 리터 단위 측정
james <- c(54017, 49980, 52003) # 물 : 밀리리터 단위 측정
mean(tom)
mean(james)
sd(tom)
sd(james)
sd(tom) / mean(tom)
sd(james) / mean(james)
# 방법3 : 함수작성 후 사용
func1 <- function(x){
reutrn((x - mean(x)) / sd(x))
}
func1(iris$Sepal.Length)
# 방법3 : 내장 함수 사용
apply(x=as.matrix(df$Sepal.Length), MARGIN = 2, FUN = "func1")
apply(x=df, MARGIN = 2, FUN = "func1")
# 방법3 : 함수작성 후 사용
func1 <- function(x){
reutrn((x - mean(x)) / sd(x))
}
func1(iris$Sepal.Length)
# 방법3 : 내장 함수 사용
apply(x=as.matrix(df$Sepal.Length), MARGIN = 2, FUN = "func1")
apply(x=df, MARGIN = 2, FUN = "func1")
# 정규화 : 최대값과 최소값을 사용하여 원래 데이터의 최소값을 0, 최대값을 1로 만드는 방법
# 수식 : (요소값 - 최소값) / (최대값 - 최소값)
func2 <- function(x){
return((x - min(x)) / (max(x) - min(x)))
}
func2(iris$Sepal.Length)
# 상관계수 : 변수들 간의 관련성을 분석. 공분산을 표준화한 값. -1 ~ 0 ~ 1 사시의 값으로 관계를 분석
# 공분산 : 두 개 이상의 확률변수에 대한 관계를 보여주는 값. 힘의 방향은 알 수 있으나 크기는 제각각이다.
plot(1:5, 2:6)
cov(1:5, 2:6)
plot(1:5, c(3, 3, 3, 3, 3))
cov(1:5, c(3, 3, 3, 3, 3))
plot(1:5, 5:1)
cov(1:5, 5:1) # -2.5 이므로 우상향 패턴을 보임
cov(1:5, 5:1) # -2.5 이므로 우하하향 패턴을 보임
cov(1:5, 5:1) # -2.5 이므로 우하향 패턴을 보임
cov(1:5 c(5000, 4000, 3000, 200, 1000))
plot(1:5 c(5000, 4000, 3000, 2000, 1000))
cov(1:5 c(5000, 4000, 3000, 2000, 1000))
plot(1:5, c(5000, 4000, 3000, 2000, 1000))
cov(1:5, c(5000, 4000, 3000, 2000, 1000))
plot(1:5, c(5000, 4000, 3000, 2000, 1000))
cov(1:5, c(5000, 4000, 3000, 2000, 1000))
cor(1:5, 5:1)
cor(1:5, c(5000, 4000, 3000, 2000, 1000))
cor(1:5, c(5000, 4500, 3200, 1600, 700))
plot(1:5, c(5000, 4500, 3200, 1600, 700))
cor(1:5, c(5000, 4500, 3200, 1600, 700))
plot(1:5, c(5000, 3500, 2200, 1000, 1200))
cor(1:5, c(5000, 3500, 2200, 1000, 1200))
cov(1:5, c(5000, 3500, 2200, 1000, 1200))
cor(1:5, c(5000, 3500, 2200, 1000, 1200))
cov(1:5, c(5000, 3500, 2200, 1000, 1200)) # 공분산
cor(1:5, c(5000, 3500, 2200, 1000, 1200)) # 상관계수
# 프랜시스 골턴이 만든 csv 자료를 사용
hf <- read.csv("testdata/galton.csv", header = T)
hf
head(hf, 3)
dim(hf)
str(hf)
summary(hf)
hf_man <- subset(hf, sex=='M')
hf_man
hf_man
hf_man <- hf_man[c("father", "height")]
hf_man
dim(hf_man)
head(hf_man, 3)
# 공분산
f_mean <- mean(hf_man$father)
s_mean <- mean(hf_man$height)
cov_xy <- cov_sum / (nrow(hf_man) - 1)
cov_xy <- cov_sum / (nrow(hf_man) - 1)
cov_sum <- sum((hf_man$father - f_mean) * (hf_man$height - s_mean)) # 편차 곱의 합
cov_xy <- cov_sum / (nrow(hf_man) - 1)
cov_xy # 2.368441
cov(hf_man$father, hf_man$height) # 2.368441
# 상관계수 : 수식
r_xy <- cov_xy / (sd(hf_man$father) * sd(hf_man$height))
r_xy
# 상관계수  : 함수
cor(hf_man$father, hf_man$height) # 0.3913174
plot(height ~ father, data = hf_man)
abline(lm(height ~ father, data = hf_man), col='red')
abline(lm(height ~ father, data = hf_man), col='red', lwd=2)
# 상관계수 검정 : 상관계수의 통계적 유의성을 판단할 수 있다
cor.test(hf_man$father, hf_man$height, method = 'pearson')
# 선형회귀분석 : 두 변수간에 상관관계가 있고 인과관계가 있는 경우 모델 작성이 가능하다
닝(ML)
# 머신러닝(ML)
# 선형회귀분석 : 두 변수간에 상관관계가 있고 인과관계가 있는 경우 모델 작성이 가능하다
# 선형회귀분석 : 두 변수간에 상관관계가 있고 인과관계가 있는 경우 모델 작성이 가능하다
# 독립변수(x, 연속형), 종속변수(y, 연속형)
# 모델 수식 : y = wx + b
# 선형회귀분석 : 두 변수간에 상관관계가 있고 인과관계가 있는 경우 모델 작성이 가능하다
# 독립변수(x, 연속형), 종속변수(y, 연속형)
# 모델 수식 : y = wx + b
# 기울기(slope)와 절편(bias)은 최소제곱법 공식을 사용
# 부모의 IQ와 자식의 IQ 데이터를 사용해 선형회귀 분석
# 부모의 IQ와 자식의 IQ는 인과관계가 있다고 가정
x <- c(110, 120, 130, 140, 150)
y <- c(100, 105, 128, 115, 142)
cor(x, y)
cor(x, y) # 양의 상관관계가 매우 높음음
cor(x, y) # 양의 상관관계가 매우 높음
plot(x, y)
x_dev <- x - mean(x)  # 편차차
y_dev <- y - mean(y)  # 편차
dev_mul <- (x - mean(x)) * (y - mean(y))
square <- x_dev ** 2
df <- data.frame(x, y, x_dev, y_dev, dev_mul, squarei)
df
df <- data.frame(x, y, x_dev, y_dev, dev_mul, square)
df
slope <- sum(df$dev_mul) / sum(df$square)
slope
bias <- mean(df$y) - slope * mean(df$x)
bias
bias # -4.2
# 모델 수식 y = 0.94 * x + -4.2
y_hat <- slope * 110 + bias
cat('예측값 : ', y_hat, '실제값 : ', 100)
cat('예측값 : ', y_hat, '실제값 : ', 105)
# 모델 수식 y = 0.94 * x + -4.2
y_hat <- slope * 120 + bias
cat('예측값 : ', y_hat, '실제값 : ', 105)
? lm
line_model <- lm
line_model <- lm(formula = y ~ x)
line_model
plot(x, y)
abline(line_model, col="blue")
new_x = 99.5
new_x = 99.5  # 미지의 x에 대한 y값이 궁금
new_y_hat <- slope * new_x + bias
new_y_hat
predict(line_model, data.frame(x=c(78.5, 123.4, 167.1))
predict(line_model, data.frame(x=c(78.5, 123.4, 167.1)))
predict(line_model, data.frame(x=c(78.5, 123.4, 167.1)))
predict(line_model, data.frame(x=c(78.5, 123.4, 167.1)))
# 단순선형회귀 모델 작성
women
# 단순선형회귀 모델 작성
head(women, 2)
summary(women)
cor(women$height, women$weight)
plot(women$height, women$weight)
# 인과관계가 있다고 가정하고 회귀분석 모델 작성
mfit <- lm(weight ~ height)
# 인과관계가 있다고 가정하고 회귀분석 모델 작성
mfit <- lm(formula = weight ~ height, data = women)
mfit
abline(mfit)
abline(mfit, col='red')
summary(mfit)
summary(mfit) # 모델 관련 요약 통계량 표시시
summary(mfit) # 모델 관련 요약 통계량 표시
# p-value: 1.091e-14 < 0.05 이므로 현재모델은 유의하다. 인과관계가 있음이 증명
루37.85 * 37.85
# p-value: 1.091e-14 < 0.05 이므로 현재모델은 유의하다. 인과관계가 있음이 증명
37.85 * 37.85
3.45000 / 0.09114
# y = wx + b    3.45 * x + -87.51667
y_hat = 3.45 * 58 + -87.51667
y_hat
y_hat <- predict(mfit, data.frame(height=c(58, 45, 67, 77)))
y_hat
# 상관계수 분석
cor.test(women$height, women$weight)
# 상관계수 분석
cor.test(women$height, women$weight)
# 방법3 : 함수작성 후 사용
func1 <- function(x){
reutrn((x - mean(x)) / sd(x))
}
func1(iris$Sepal.Length)
mean(1:5)
var(1:5)
sd(1:5)
summary(1:10)
# iris dataset로 작업
head(iris, 3)
df <- iris[, 1:4]
head(df, 3)
dim(df)
# 방법1 : 수식 직접 사용
(iris$Sepal.Length - mean(iris$Sepal.Length)) / sd(iris$Sepal.Length)
df$Sepal.Length
# 방법2 : 내장 사용
scale(df$Sepal.Length)
scale(df)
# 방법3 : 함수작성 후 사용
func1 <- function(x){
reutrn((x - mean(x)) / sd(x))
}
func1(df$Sepal.Length)
# 방법3 : 함수작성 후 사용
func1 <- function(x){
return((x - mean(x)) / sd(x))
}
func1(df$Sepal.Length)
# 방법3 : 내장 함수 사용
apply(x=as.matrix(df$Sepal.Length), MARGIN = 2, FUN = "func1")
apply(x=df, MARGIN = 2, FUN = "func1")
제거나 조정을 신중히 고려해야 함.
# 회귀분석모형의 적절성을 위한 조건 : 아래의 조건 위배 시에는 변수 제거나 조정을 신중히 고려해야 함.
# 1) 정규성 : 독립변수들의 잔차항이 정규분포를 따라야 한다.
# 2) 독립성 : 독립변수들 간의 값이 서로 관련성이 없어야 한다.
# 3) 선형성 : 독립변수의 변화에 따라 종속변수도 변화하나 일정한 패턴을 가지면 좋지 않다.
# 4) 등분산성 : 독립변수들의 오차(잔차)의 분산은 일정해야 한다. 특정한 패턴 없이 고르게 분포되어야 한다.
# 5) 다중공선성 : 독립변수들 간에 강한 상관관계로 인한 문제가 발생하지 않아야 한다.
plot(mfit)
# 인과관계가 있다고 가정하고 회귀분석 모델 작성
mfit <- lm(formula = weight ~ height, data = women)
mfit
abline(mfit, col='red')
summary(mfit) # 모델 관련 요약 통계량 표시
# p-value: 1.091e-14 < 0.05 이므로 현재모델은 유의하다. 인과관계가 있음이 증명
37.85 * 37.85
3.45000 / 0.09114
# y = wx + b    3.45 * x + -87.51667
y_hat = 3.45 * 58 + -87.51667
y_hat
y_hat <- predict(mfit, data.frame(height=c(58, 45, 67, 77)))
y_hat
# 상관계수 분석
cor.test(women$height, women$weight)
# 회귀분석모형의 적절성을 위한 조건 : 아래의 조건 위배 시에는 변수 제거나 조정을 신중히 고려해야 함.
# 1) 정규성 : 독립변수들의 잔차항이 정규분포를 따라야 한다.
# 2) 독립성 : 독립변수들 간의 값이 서로 관련성이 없어야 한다.
# 3) 선형성 : 독립변수의 변화에 따라 종속변수도 변화하나 일정한 패턴을 가지면 좋지 않다.
# 4) 등분산성 : 독립변수들의 오차(잔차)의 분산은 일정해야 한다. 특정한 패턴 없이 고르게 분포되어야 한다.
# 5) 다중공선성 : 독립변수들 간에 강한 상관관계로 인한 문제가 발생하지 않아야 한다.
plot(mfit)
par(mfrow=c(2, 2))
plot(mfit)
mean(1:5)
var(1:5)
sd(1:5)
summary(1:10)
# iris dataset로 작업
head(iris, 3)
df <- iris[, 1:4]
head(df, 3)
dim(df)
# 방법1 : 수식 직접 사용
(iris$Sepal.Length - mean(iris$Sepal.Length)) / sd(iris$Sepal.Length)
df$Sepal.Length
# 방법2 : 내장 사용
scale(df$Sepal.Length)
scale(df)
# 방법3 : 함수작성 후 사용
func1 <- function(x){
return((x - mean(x)) / sd(x))
}
func1(df$Sepal.Length)
# 방법3 : 내장 함수 사용
apply(x=as.matrix(df$Sepal.Length), MARGIN = 2, FUN = "func1")
# 방법3 : 내장 함수 사용
apply(X=as.matrix(df$Sepal.Length), MARGIN = 2, FUN = "func1")
apply(X=df, MARGIN = 2, FUN = "func1")
# 정규화 : 최대값과 최소값을 사용하여 원래 데이터의 최소값을 0, 최대값을 1로 만드는 방법
# 수식 : (요소값 - 최소값) / (최대값 - 최소값)
func2 <- function(x){
return((x - min(x)) / (max(x) - min(x)))
}
func2(iris$Sepal.Length)
func2(1:10)
func2(c(5000:5100, 10))
func2(-10:-20)
# 예) 3개의 생물에 대해 2명의 관측자가 물 용량을 측정한 데이터가 있다.
tom <- c(54, 50, 52)  # 물 : 리터 단위 측정
james <- c(54017, 49980, 52003) # 물 : 밀리리터 단위 측정
mean(tom) #52
mean(james) #52000
sd(tom)
sd(james)
sd(tom) / mean(tom) # 리터 단위 측정한 변동계수
sd(james) / mean(james) # 밀리리터 단위 측정한 변동계수
# Sys.setenv(JAVA_HOME="c:/Program Files/Java/jdk-11.0.5")  c:\\Program Files\\Java\\jdk-11.0.5
library(rJava)
library(DBI)
library(RJDBC)
drv <- JDBC(driverClass = "org.mariadb.jdbc.Driver",
classPath = "c:/work/mariadb-java-client-2.6.2.jar")
conn <- dbConnect(drv = drv, "jdbc:mysql://127.0.0.1:3306/test", "root", "123")
conn
dbListTables(conn)
query <- "select jikwon_pay, date_format(now(), '%Y')-date_format(jikwon_ibsail,'%Y') + 1 as jikwon_ibsa from jikwon;"
jik <- dbGetQuery(conn, query)
jik
jik_model <- lm(formula = jikwon_pay ~ jikwon_ibsa, data = jik)
summary(jik_model)
coef(jik_model)
cor(jik$jikwon_ibsa, jik$jikwon_pay)  # 0.9196725
plot(jik$jikwon_ibsa, jik$jikwon_pay)
fitted(jik_model)[1:4] # 모델이 예측한 값(dist)
residuals(jik_model)[1:4] # 모델과 실제값과의 차이(residuals, 잔차)
jik[1:4,]
fitted(jik_model)[1:4] + residuals(jik_model)[1:4]  # 예측값 + 잔차 = 실제값. 잔차 = 실제값 - 예측값
confint(jik_model)
y_num <- readline('근무년수 입력:')
y_num
predict(jik_model, newdata = data.frame(jikwon_ibsa=y_num))
predict(jik_model, newdata = data.frame(jikwon_ibsa=y_num))
